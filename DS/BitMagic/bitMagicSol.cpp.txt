#define CHAR_BIT 8

//Compute the sign of an integer	
int getSign(int x)
{
	int sign = -(x < 0);  // if x < 0 then -1, else 0.		

	sign =  x >> (sizeof(int) * CHAR_BIT - 1); // might not be portable
	



	//other TP
		sign = -(int) ( (unsigned int) ( (int) x) >> ( sizeof(int) * CHAR_BIT - 1) );
		
		//Alternatively, if you prefer the result be either -1 or +1, then use:
		sign = +1 | (v >> (sizeof(int) * CHAR_BIT - 1));  // if v < 0 then -1, else +1

		//On the other hand, if you prefer the result be either -1, 0, or +1, then use:
		sign = (v != 0) | -(int)((unsigned int)((int)v) >> (sizeof(int) * CHAR_BIT - 1));

		sign = (v != 0) | (v >> (sizeof(int) * CHAR_BIT - 1));  // -1, 0, or +1

		// Or, for portability, brevity, and (perhaps) speed:
		sign = (v > 0) - (v < 0); // -1, 0, or +1

		//If instead you want to know if something is non-negative, resulting in +1 or else 0, then use:
		sign = 1 ^ ((unsigned int)v >> (sizeof(int) * CHAR_BIT - 1)); // if v < 0 then 0, else 1
		
}

//Detect if two integers have opposite signs
bool isOppositeSign(int x, int y)
{
	return ( (x ^ y)  < 0 ); 
	
}


unsigned int getAbsWithoutBranching( int x)
{
	int const mask = x >> sizeof(int) * CHAR_BIT - 1; //get sign -1 for -ve and 0 for -ve
	
	unsigned int r =  r = (x ^ mask) - mask; // x^ 0 = x,

	//r = (x + mask) ^ mask; // above are patented

	//r = (v < 0) ? -(unsigned)v : v

	return r;
}

int getMinWithoutBranching(int x, int y)
{
	int r = y ^ ( (x ^ y) & -(x < y) ) // y ^ ( (x ^ y) & ~0 )

	//r = y + ((x - y) & ((x - y) >> (sizeof(int) * CHAR_BIT - 1)))
	// r = (x < y) ? x : y
	return r;
	
}

int getMaxWithoutBranching(int x, int y)
{
	int r = x ^ ( (x ^ y) & -(x < y) ) 

	//r = x + ((x - y) & ((x - y) >> (sizeof(int) * CHAR_BIT - 1)))
	// r = (x < y) ? y : x
	
	return r;
	
}

int  countSetBits(int x) 
{
	Counting bits set, naive way
	Counting bits set by lookup table //lookup: 
	Counting bits set, Brian Kernighan way
	
	Counting bits set in 14, 24, or 32-bit words using 64-bit instructions
	Counting bits set, in parallel

	Count bits set (rank) from the most-significant bit upto a given position
	Select the bit position (from the most-significant bit) with the given count (rank)

}


int  countSetBitsNaive(int x) 
{
	for (int count = 0; x; x = x>>1 )
	{
		count +=  x & 1;
		
	}
	return count;	
}

int  countSetBitsBT(int x) 
{
	int count = 0;
	while(x)
	{
		count +=  x & 1;
		x = x & (x-1);
		
	}
	return count;	
	
}

int  countSetBitsLookupTable(int x) 
{
// Option 1:
	int count = bitsSetTable256[x & 0xff] + 
		bitsSetTable256[(x >> 8) & 0xff] + 
		bitsSetTable256[(x >> 16) & 0xff] + 
		bitsSetTable256[x >> 24]; 

// Option 2:
	unsigned char * p = (unsigned char *) &x;
	c = bitsSetTable256[p[0]] + 
		bitsSetTable256[p[1]] + 
		bitsSetTable256[p[2]] +	
		bitsSetTable256[p[3]];
	
	return count;
}


bool computeParity(int x) //returns 1 if an odd number of bits set
{
	bool computeParityNaive(int x)
	bool computeParitylookupTable (int x)
	
	//Compute parity of a byte using 64-bit multiply and modulus division
	//Compute parity of word with a multiply
	//Compute parity in parallel
}


bool computeParityNaive(int x)
{
	bool parity = false; 
	
	while (x)
	{
	  parity = !parity;
	  x = x x (x - 1);
	}

}

bool computeParityLookupTable (int x)
{
	x ^= x >> 16;
	x ^= x >> 8;
	bool parity = parityTable256[x & 0xff];

	// Variation:
	unsigned char * p = (unsigned char *) &x;
	parity = parityTable256[p[0] ^ p[1] ^ p[2] ^ p[3]];

}


#define SWAP(x, y) (  ( (x) ^= (y) ) , ( (y) ^= (x) ) ,   ( (x) ^= (y) )   )
void swapValues(int* x, int* y)
{

	//Swapping values with subtraction and addition

	Swapping values with XOR

	Swapping individual bit with XOR
	
	Swapping individual bits with XOR
	
}

unsigned int reverseBits(unsigned int x)
{
	unsigned int reverseBitsNaive(unsigned int x)
	unsigned int reverseBitsLookupTable(unsigned int x)
		
	//Reverse the bits in a byte with 3 operations (64-bit multiply and modulus division)
	//Reverse the bits in a byte with 4 operations (64-bit multiply, no division)
	//Reverse the bits in a byte with 7 operations (no 64-bit, only 32)
	//Reverse an N-bit quantity in parallel with 5 * lg(N) operations

}

unsigned int reverseBitsNaive(unsigned int x)
{
	unsigned int r = x;
	int numberOfBits = sizeof(v) * CHAR_BIT - 1
	
	for (x >>= 1; x; x >>= 1)
	{   
	  r <<= 1;
	  r |= x & 1;
	  numberOfBits--;
	}
	
	r <<= numberOfBits;
	return r;
}

unsigned int reverseBitsLookupTable(unsigned int x)
{
// Option 1:
unsigned int r = (bitReverseTable256[x & 0xff] << 24) | 
				 (bitReverseTable256[(x >> 8)  & 0xff] << 16) | 
				 (bitReverseTable256[(x >> 16) & 0xff] << 8) |
				 (bitReverseTable256[(x >> 24) & 0xff]);

// Option 2:
unsigned char * p = (unsigned char *) &x;
unsigned char * q = (unsigned char *) &r;

	q[3] = bitReverseTable256[p[0]]; 
	q[2] = bitReverseTable256[p[1]]; 
	q[1] = bitReverseTable256[p[2]]; 
	q[0] = bitReverseTable256[p[3]];

}

unsigned int reverseN-BitParallel(unsigned int x)
{

	// swap odd and even bits
	x = ( (x >> 1) & 0x55555555) | ( (x & 0x55555555) << 1);

	// swap consecutive pairs
	x = ( (x >> 2) & 0x33333333) | ((x & 0x33333333) << 2);

	// swap nibbles 
	x = ((x >> 4) & 0x0F0F0F0F) | ((x & 0x0F0F0F0F) << 4);

	// swap bytes
	x = ((x >> 8) & 0x00FF00FF) | ( (x & 0x00FF00FF) << 8);

	// swap 2-byte long pairs
	x = ( x >> 16             ) | ( x               << 16);


}


int computeRemainder(int x, int y)  // aka Modulus division
{
	unsigned int computeRemainderByPowerOf(unsigned int x, unsigned int y) // y= 1 << Z i.e. power of 2
	
	unsigned int computeRemainderByPowerOfMinus1(unsigned int x, unsigned int y) // y= 1U << -1 .. 3,5,7
	
	//Compute modulus division by (1 << s) - 1 in parallel without a division operator

}

unsigned int computeRemainderByPowerOf(unsigned int x, unsigned int y) // y= 1U << s i.e. power of 2
{
	// y = 1U << s;  So d will be one of: 1, 2, 4, 8, 16, 32, ...			  
	unsigned int modulus  =  x & (y - 1);
	return modulus;
}

unsigned int index_HighestBitSetNaive(unsigned int x) //aka  logbase 2,  FFZ, FFS opposite
{
	unsigned int r = 0; // r will be lg(x)
	while (x >>= 1)
	{
	  r++;
	}
	return r;
}

unsigned int index_HighestBitSetLookupTable(unsigned int x) //aka  logbase 2,  FFZ, FFS opposite
{
	unsigned int r = 0; 
	unsigned int t, tt; // temp

	if (tt = x >> 16)
	{
	  r = (t = tt >> 8) ? 24 + LogTable256[t] : 16 + LogTable256[tt];
	}
	else 
	{
	  r = (t = x >> 8) ? 8 + LogTable256[t] : LogTable256[x];
	}
	return r;
	
	//-------------------------------------------------------------

	if (tt = x >> 24) 
	{
	  r = 24 + LogTable256[tt];
	} 
	else if (tt = x >> 16) 
	{
	  r = 16 + LogTable256[tt];
	} 
	else if (tt = x >> 8) 
	{
	  r = 8 + LogTable256[tt];
	} 
	else 
	{
	  r = LogTable256[x];
	}

	return r;
	
}



#FFS_CTZ_count_of_TrailingZero
//Counting consecutive trailing zero bits //FFS or CLZ 

//Count the consecutive zero bits (trailing) on the right by binary search
// if x is 1101000 (base 2), then c will be 3
// NOTE: if 0 == v, then count = 31.

Count the consecutive zero bits (trailing) on the right linearly

unsigned int CTZ_linearScan(unsigned int x)
{
	unsigned int count = 32; 
	
	if (x)
	{
		x = ( x ^ (x - 1) ) >> 1;  // Set x's trailing 0s to 1s and zero rest => isolate the lowestset bit
	
		for (count = 0; x; count++)
		{
			x >>= 1;
		}
	}
	else
	{
		count = CHAR_BIT * sizeof(v);
	}

	return count;

}

unsigned int CTZ_parallel(unsigned int x)
{
	unsigned int count = 32; 
	
	x &= -signed(x);

	if (x) 
		count--;
	if (x & 0x0000FFFF) 
		count -= 16;
	if (x & 0x00FF00FF) 
		count -= 8;
	if (x & 0x0F0F0F0F) 
		count -= 4;
	if (x & 0x33333333) 
		count -= 2;
	if (x & 0x55555555) 
		count -= 1;

	return count;
	
}
unsigned int CTZ_binarySearch(unsigned int x)
{
	unsigned int count; 

	
	if (x & 0x1) 
	{
	  count = 0; // special case for odd v (assumed to happen half of the time)
	}
	else
	{
	  count = 1;
	  if ((x & 0xffff) == 0) 
	  {  
		x >>= 16;  
		count += 16;
	  }
	  if ((x & 0xff) == 0) 
	  {  
		x >>= 8;  
		count += 8;
	  }
	  if ((x & 0xf) == 0) 
	  {  
		x >>= 4;
		count += 4;
	  }
	  if ((x & 0x3) == 0) 
	  {  
		x >>= 2;
		count += 2;
	  }
	  
	  count -= x & 0x1;

	}
	return count;
}



unsigned int nextPowerOf2(unsigned int x)
{
	x--;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	x++;
	
	return x;
}


unsigned int nextBitPermutation(unsigned int x)
{
	unsigned int t = (x | (x - 1)) + 1;  
	
	unsigned int  w = t | ( ( (  (t & -t) / (x & -x) ) >> 1) - 1);  
}

#DO:
Interleave bits the obvious way
Interleave bits by table lookup



